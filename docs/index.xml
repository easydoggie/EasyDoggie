<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EasyDoggie</title>
    <link>https://easydoggie.github.io/EasyDoggie/</link>
    <description>Recent content on EasyDoggie</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Jun 2019 15:35:58 +0900</lastBuildDate>
    
	<atom:link href="https://easydoggie.github.io/EasyDoggie/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Uninstall</title>
      <link>https://easydoggie.github.io/EasyDoggie/uninstall/uninstall/</link>
      <pubDate>Tue, 18 Jun 2019 15:14:04 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/uninstall/uninstall/</guid>
      <description> アンインストール 完全に消去する場合は、--purgeオプションを利用します。には削除対象のリリース名を指定します。
$ helm delete --purge &amp;lt;release_name&amp;gt;</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/prometheus/</link>
      <pubDate>Thu, 20 Jun 2019 17:17:01 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/prometheus/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Nodejs</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/nodejs/</link>
      <pubDate>Thu, 20 Jun 2019 17:16:30 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/nodejs/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Adminer</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/adminer/</link>
      <pubDate>Thu, 20 Jun 2019 17:14:58 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/adminer/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/elasticsearch/</link>
      <pubDate>Wed, 19 Jun 2019 16:50:57 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/elasticsearch/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Kibana</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/kibana/</link>
      <pubDate>Wed, 19 Jun 2019 16:50:37 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/kibana/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Gitea</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/gitea/</link>
      <pubDate>Wed, 19 Jun 2019 16:10:14 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/gitea/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Fluentd</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/fluentd/</link>
      <pubDate>Wed, 19 Jun 2019 15:46:47 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/fluentd/</guid>
      <description>作成中</description>
    </item>
    
    <item>
      <title>Drone</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/drone/</link>
      <pubDate>Wed, 19 Jun 2019 13:46:05 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/drone/</guid>
      <description>デフォルトの設定 #file: drone/values.yaml drone: service: type: NodePort server: host: drone.localhost sourceControl: provider: gitea gitea: server: http://gitea:3000 sharedSecret: 45f7a425dc0595bdca3af34ef97ebaa4    パラメータ 初期値 説明     drone.service.type NodePort Serviceタイプ   drone.server.host drone.localhost DroneのWebUIのホスト名   drone.sourceControl.provider gitea ソース管理をしているプロバイダ   drone.sourceControl.gitea.server http://gitea:3000 Giteaサーバのアドレス   drone.sharedSecret 45f7a425dc0595bdca3af34ef97ebaa4 DroneとGiteaの共有秘密鍵    設定変更の例 ServiceタイプをLoadBalancerに変更する 外部からのアクセスにIngressではなくLoadBalancerを使う場合は、Serviceタイプの変更を行います。
以下のファイルをHelmクライアントを実行するサーバに作成します。
# file: edit01-values.yaml drone: service: type: LoadBalancer インストールを実行します。
$ helm install --name drone -f edit01-values.</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://easydoggie.github.io/EasyDoggie/uninstall/prometheus/</link>
      <pubDate>Tue, 18 Jun 2019 15:11:47 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/uninstall/prometheus/</guid>
      <description>Prometheus Operatorの完全アンインストール helm deleteコマンドだけだと、kunernetesのCRD(Custom Resource Definitions)は削除されません。 CRDはkubectl delete crdコマンドで個別に削除をします。
$ helm delete --purge &amp;lt;release_name&amp;gt; $ kubectl delete crd prometheuses.monitoring.coreos.com $ kubectl delete crd prometheusrules.monitoring.coreos.com $ kubectl delete crd servicemonitors.monitoring.coreos.com $ kubectl delete crd alertmanagers.</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/redis/</link>
      <pubDate>Mon, 17 Jun 2019 10:18:17 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/redis/</guid>
      <description>シングルマスター構成 マスター x 1、スレーブ x 0の構成例です。スレーブを利用しない場合は、cluster.enabledの値をfalseに設定します。
# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: false    # values     Master 1   Slave 0   Master RDB x   Master AOF o    
   接続先 ホスト ポート     Master redis-master 6379    マスター、スレーブ構成 マスター x 1、スレーブ x 2の構成例です。スレーブを利用する場合は、cluster.enabledをtrueに設定します。スレーブのノード数は、cluser.slaveCountで設定します。
# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2    # values     Master 1   Slave 2   Master RDB x   Master AOF o   Slave RDB x   Slave AOF o</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/mysql/</link>
      <pubDate>Mon, 17 Jun 2019 10:17:05 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/mysql/</guid>
      <description>シングルマスター構成 マスター x 1、スレーブ x 0の構成例です。スレーブを利用しない場合は、replication.enabledの値をfalseに設定します。
# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: false    接続先 ホスト ポート     Master &amp;lt;helm_name&amp;gt;-mysql 3306    マスター、スレーブ構成 マスター x 1、スレーブ x 2の構成例です。スレーブを利用する場合は、replication.enabledをtrueに設定します。スレーブのノード数は、slave.replicasで設定します。
# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true slave: replicas: 2    接続先 ホスト ポート     Master &amp;lt;helm_name&amp;gt;-mysql 3306   Slave &amp;lt;helm_name&amp;gt;-mysql-slave 3306    マスター、スレーブの切り離し間隔を調整する マスター、スレーブのPodをServiceから切り離す時間を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Serviceから切り離されます。</description>
    </item>
    
    <item>
      <title>Grafana</title>
      <link>https://easydoggie.github.io/EasyDoggie/password/grafana/</link>
      <pubDate>Mon, 17 Jun 2019 10:16:06 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/password/grafana/</guid>
      <description> Grafana 以下のコマンドでadminユーザの初期パスワードを取得します。
$ kubectl get secret grafana -o jsonpath=&amp;#34;{.data.admin-password}&amp;#34; | base64 --decode ; echo</description>
    </item>
    
    <item>
      <title>Webap</title>
      <link>https://easydoggie.github.io/EasyDoggie/examples/webap/</link>
      <pubDate>Mon, 24 Jun 2019 10:44:29 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/examples/webap/</guid>
      <description>WebAPサーバ(Web3層構成) 目次  ローカル開発環境 ステージング/本番環境  ローカル開発環境 ローカルの開発環境を想定した構成です。すべての構成をKubernetes上にインストールします。
   構成要素 内容     Ingress Controller Nginx Ingress   Web Nginx   AP Nginx Unit   DB MySQL    $ helm install --name ingress easydoggie/ingress $ helm install --name nginx easydoggie/nginx $ helm install --name mysql easydoggie/mysql WebとAPは同じPodで構成されているため、1つのHelmチャート(easydoggie/nginx)でインストールされます。
ステージング/本番環境 GCPなどのパブリッククラウドでの利用を想定した構成です。Ingressコントローラとデータベースは、パブリッククラウドのマネジメントサービスを利用します。以下はGCPでの構成例です。
   構成要素 内容     Ingress Controller Cloud LoadBalancing   web Nginx   AP Nginx Unit   DB Cloud SQL    $ helm install --name nginx easydoggie/nginx $ helm install --name ingress -f https://raw.</description>
    </item>
    
    <item>
      <title>Adminer</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/adminer/</link>
      <pubDate>Tue, 18 Jun 2019 15:18:56 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/adminer/</guid>
      <description>Adminerはデータベースの管理ツールです。phpMyAdminの代替として利用することができます。 対応しているデータベースは以下の通りです。
 MySQL MariaDB PostgreSQL SQLite MS SQL Oracle Firebird SimpleDB Elasticsearch MongoDB  TL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/adminer# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/adminer はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でAdminerにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/adminer &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set service.</description>
    </item>
    
    <item>
      <title>Drone</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/drone/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:05 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/drone/</guid>
      <description> Droneのインストール DroneはCI/CDを行うためのツールです。
デフォルトのソースリポジトリはDroneと同じKubernetes上のGiteaを参照します。参照先のリポジトリを変更したい場合は、Configのページを参照してください。
ServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/drone &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
 デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でDroneにアクセスする場合は、別途Ingressのインストールを行ってください。  ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set drone.service.type=LoadBalancer easydoggie/drone</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/elasticsearch/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:15 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/elasticsearch/</guid>
      <description>Elasticsearchは分散型RESTful検索/分析エンジンです。
EasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを検索/分析する用途で利用することを想定しています。
Elasticsearchのインストール &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/elasticsearch デフォルトではシングルマスタのノードが起動します。 クラスタのノード数の変更などは、設定変更のページを参照してください。</description>
    </item>
    
    <item>
      <title>Fluentd</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/fluentd/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:24 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/fluentd/</guid>
      <description>Fluentdはログのデータを収集します。
EasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを収集する用途で利用することを想定しています。
Fluentdのインストール &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/fluentd デフォルトでは同じKuberneteクラスタ内のElasticsearchに収集したデータを転送します。 転送先の設定などの変更を行う場合は、設定変更のページを参照してください。</description>
    </item>
    
    <item>
      <title>Gitea</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/gitea/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:32 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/gitea/</guid>
      <description> GiteaはセルフホストのGitサーバです。
Giteaのインストール ServiceとしてNoadPortを使う場合(デフォルト) &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/gitea  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でGiteaにアクセスする場合は、別途Ingressのインストールを行ってください。  ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set service.type=LoadBalancer easydoggie/gitea</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/ingress/</link>
      <pubDate>Thu, 20 Jun 2019 17:15:40 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/ingress/</guid>
      <description>サービスの構成、初期化方法の変更 以下の表はIngressおよびNGINX Ingressの変更可能なパラーメータとデフォルト値の一覧です。    パラメータ デフォルト 説明     nginx-ingress.controller.service.type LoadBalancer Nginx Ingressのサービスタイプ   ingress.enabled true ingressリソースを有効にする場合はtrue、無効にする場合はfalse   ingress.nginxController true IngressコントローラとしてNginx Ingressを利用する場合はtrue, 利用しない場合はfalse   ingress.annotations {} Ingressのannotaions   ingress.hosts.nginx.host easydoggie.example.com NINGXのホスト名   ingress.hosts.nginx.enabled true NGINXへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.nginx.serviceName nginx NGINXのService名   ingress.hosts.nginx.servicePort 80 NGINXのSerivceポート番号   ingress.hosts.gitea.host gitea.example.com Giteaのホスト名   ingress.hosts.gitea.enabled true Giteaへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.gitea.serviceName gitea GiteaのService名   ingress.</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/ingress/</link>
      <pubDate>Tue, 18 Jun 2019 15:20:03 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/ingress/</guid>
      <description> 外部（インターネット）からのアクセス経路としてIngressを利用する場合に設定します。
はじめに  デフォルトではEasyDoggieとして設定している、すべてのルールがIngressリソースに設定されます。 Ingressリソースのルールを有効もしくは無効にするには、Ingressの設定を参照してください。 GKEなどのマネージドKubernetes環境でIngressを利用する場合は、ファイアウォールの接続許可が必要な場合があります。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール IngressコントローラとしてNginx Ingressを利用する場合 デフォルトでは、IngressとNginx Ingressコントローラがインストールされます。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/ingress Ingressだけをインストールする場合 GKEなどIngressコントローラとしてマネジメントLBなどを利用する場合のパターンです。Ingressのみ必要な場合は、--setオプションでNginx-Ingressのインストールをfalseに設定にします。
$ helm install --name &amp;lt;release_name&amp;gt; --set ingress.nginxController=false easydoggie/ingress Nginx IngressおよびすべてのIngressルールを無効化したvalues.yamlを利用することもできます。必要なルールは--setオプションで有効にすることができます。
以下は、Nginxのルールのみ有効にした実行例です。
$ helm install --name &amp;lt;release_name&amp;gt; -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/ingress/ingress/values-false.yaml --set ingress.hosts.nginx.enabled=true easydoggie/ingress Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。
$ helm delete --purge &amp;lt;release_name&amp;gt; </description>
    </item>
    
    <item>
      <title>Kibana</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/kibana/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:39 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/kibana/</guid>
      <description> Kibanaはデータを可視化するツールです。
EasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを可視化する用途で利用することを想定しています。
Kibanaのインストール ServiceとしてNoadPortを使う場合(デフォルト) &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/kibana  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でKibanaにアクセスする場合は、別途Ingressのインストールを行ってください。  ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set kibana.service.type=LoadBalancer easydoggie/kibana</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/mysql/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:46 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/mysql/</guid>
      <description>MySQLはデータベース管理システムです。
シングルマスタもしくはマスタ-スレープ構成のMySQLをインストールすることができます。
MySQLのインストール &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/mysql デフォルトではマスター x 1、スレーブ x 1のコンテナが起動します。 スレーブのノード数の変更などは、設定変更のページを参照してください。</description>
    </item>
    
    <item>
      <title>NGINX, NGINX Unit</title>
      <link>https://easydoggie.github.io/EasyDoggie/config/nginx/</link>
      <pubDate>Thu, 20 Jun 2019 17:16:07 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/config/nginx/</guid>
      <description>サービスの構成、初期化方法の変更 以下の表はNGINXおよびNGINX Unitの変更可能なパラーメータとデフォルト値の一覧です。    パラメータ デフォルト 説明     replicaCount 1 レプリカセットの数   image.repository nginx NGINXのイメージ名   image.tag 1.16.0-alpine NGINXイメージのタグ名   image.pullPolicy IfNotPresent イメージのプルポリシー   imageUnit.repository nginx/unit NGINX Unitのイメージ名   imageUnit.tag 1.9.0-full NGINX Unitのタグ名   imageUnit.pullPolicy IfNotPresent イメージのプルポリシー   imageInit.alpine.repository alpine/git 初期化コンテナ(git clone)用のイメージ名   imageInit.alpine.tag latest 初期化イメージのタグ名   imageInit.alpine.pullPolicy IfNotPresent 初期化イメージのプルポリシー   imageInit.alpine.command |-
- &amp;quot;&amp;quot; 初期化コンテナのEntryPoint   imageInit.</description>
    </item>
    
    <item>
      <title>NGINX, NGINX Unit</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/nginx/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:52 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/nginx/</guid>
      <description>NGINXは、オープンソースのWebサーバです。NGINX Unitは、複数言語に対応しているアプリケーションサーバです。デフォルトでは1つのPod内にNGINXとNGINX Unitのコンテナが起動します。
TL;DR # NGINXとNGINX Unitをインストールして、NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/nginx# NGINXだけインストールして、NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install --set appServer.enabled=false easydoggie/nginx# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/nginx はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 以下のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でNginxにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール NGINXとNGINX Unitをインストールする場合(デフォルト) デフォルトでは、NGINXとNGINX Unitがインストールされます。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/nginx  NGINXおよびNGINX Unitの設定値は、デフォルトの値が設定されます。設定値を変更する場合は、NGINXの設定変更またはNGINX Unitの設定変更を参照してください。</description>
    </item>
    
    <item>
      <title>Node.js</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/nodejs/</link>
      <pubDate>Fri, 14 Jun 2019 17:56:55 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/nodejs/</guid>
      <description> Node.jsのインストール ServiceとしてLoadBalancerを使う場合 デフォルトの設定では、Service.type=LoadBalancerとして起動します。 $ helm install --nama &amp;lt;release_name&amp;gt; easydoggie/node IngressとNginx Ingressを使う場合 IngressコントローラとしてNginx Ingressを使うパターンです。 IngressとNginx Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。また、ingress.kubernetes.io/ingress.classがnginxに指定されます。 $ helm install --name &amp;lt;release_name&amp;gt; \ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-nginx-ingress.yaml easydoggie/node IngressとGKEなどのマネジメントIngressコントローラを使う場合 IngressコントローラとしてGKEなどのマネジメントロードバランサーを使うパターンです。 Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。 $ helm install --name &amp;lt;release_name&amp;gt; \ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-ingress.yaml easydoggie/node</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/prometheus/</link>
      <pubDate>Mon, 17 Jun 2019 10:06:18 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/prometheus/</guid>
      <description> Prometheus Operatorのインストール Prometheusはモニタリングのツールです。このチャートでは以下のモニタリングツール一式がインストールされます。
 prometheus-operator prometheus alertmanager node-exporter kube-state-metrics grafana  GrafanaのServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/prometheus &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
 デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でGrafanaにアクセスする場合は、別途Ingressのインストールを行ってください。  GrafanaのServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set prometheus-operator.grafana.service.type=LoadBalancer easydoggie/prometheus</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/redis/</link>
      <pubDate>Tue, 18 Jun 2019 15:20:15 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/redis/</guid>
      <description>Redisはインメモリのデータストアです。
シングルマスタもしくはマスタ/スレーブ構成のRedisをインストールすることができます。 Redisのインストール &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/redis デフォルトではマスター x 1、スレーブ x 2のコンテナが起動します。 スレーブのノード数の変更などは、設定変更のページを参照してください。</description>
    </item>
    
  </channel>
</rss>