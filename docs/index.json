[
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/nodejs/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": " Node.jsのインストール ServiceとしてLoadBalancerを使う場合 デフォルトの設定では、Service.type=LoadBalancerとして起動します。\n$ helm install --nama \u0026lt;release_name\u0026gt; easydoggie/node IngressとNginx Ingressを使う場合 IngressとNginx Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。\n$ helm install --name \u0026lt;release_name\u0026gt; \\ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-ingress.yaml easydoggie/node IngressとGKEなどのマネジメントIngressコントローラを使う場合 Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。\n作成中 Node.jsのアンインストール 完全に消去する場合は、--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt;"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Install \u0026amp; Uninstall Helm Chartごとの個別インストールとアンインストール方法\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/",
	"title": "Config",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Config 設定変更の方法\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/prometheus/",
	"title": "Prometheus",
	"tags": [],
	"description": "",
	"content": " Prometheus Operatorのインストール $ helm install --name \u0026lt;release_name\u0026gt; easydoggie/ptometheus-oeprator Prometheus Operatorの完全アンインストール helm deleteコマンドだけだと、kunernetesのCRD(Custom Resource Definitions)は削除されません。 CRDはkubectl delete crdコマンドで個別に削除をします。\n$ helm delete --purge \u0026lt;release_name\u0026gt; $ kubectl delete crd prometheuses.monitoring.coreos.com $ kubectl delete crd prometheusrules.monitoring.coreos.com $ kubectl delete crd servicemonitors.monitoring.coreos.com $ kubectl delete crd alertmanagers.monitoring.coreos.com"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/password/",
	"title": "Password",
	"tags": [],
	"description": "",
	"content": " Chapter 3 Password 初期パスワード\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/",
	"title": "EasyDoggie",
	"tags": [],
	"description": "",
	"content": " EasyDoggie ゲームインフラは、もっと楽にできる！ スマートフォン向けゲームはレッドオーシャン化が進み、小規模の開発会社では生き残るのが難しくなっています。斬新なゲームアイデアを実現するためにゲームインフラとしてどのような貢献ができるのでしょうか？現実問題として、以下のような悩みを抱えている開発会社が多いのではないでしょうか。\n ・　サーバーサイドのプログラマですが、インフラも兼務しています。インフラの構築、運用に時間がかかってサーバサイドのプログラミングが進みません\n・　インフラの初心者しか会社にいません。ミドルウェアのパラメータ設計の方法がわかりません。全部デフォルト値でよいですか？\n・　コンテナやマイクロサービスに興味があります。でもデプロイや監視の方法がわからないです。\n・　インフラの設計、構築、運用に実績のある外部ベンダに依頼したいのですが、外注コストが心配です。\n このようなインフラ設計、構築、運用の悩みを解決するのに、構築済みのコンテナを再利用する方法があります。\nそう、EasyDoggieなら設計済みコンテナからCI/CD、運用監視まで、そろっています！\nEasyDoggie構成イメージ セットアップ方法 Helmのインストール EasyDoggieはKubernetes上で動作します。コンテナの初期設定はHelmを利用してインストールを行います。 初めにHelmのインストールと初期設定を行います。 Helmについては、ブログでも紹介をしています。Helmの概要を知りたい場合に、参考にしてください。\n$ wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz $ tar xvfz helm-v2.13.1-linux-amd64.tar.gz $ sudo mv linux-amd64/helm /usr/local/bin/helm $ helm init Helmのインストールについては、ブログでも紹介をしているので、参考にしてください。 GKEなどRBACのアクセス制御が有効になっている環境では、Tillerをインストール(helm init)する前にサービスアカウントの設定を行ってください。また、helm initを行うときにサービスアカウントの指定オプションを追加してください。\n$ kubectl apply -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/serviceaccount/helm-account.yaml $ helm init --service-account helm Helmリポジトリの追加 EasyDoggie用のHelmリポジトリを追加します。\n$ helm repo add easydoggie https://easydoggie.github.io/helm-repo/releases $ helm repo list NAME URL stable https://kubernetes-charts.storage.googleapis.com local http://127.0.0.1:8879/charts easydoggie https://easydoggie.github.io/helm-repo/releases EasyDoggieのインストール Helmを利用してEasyDoggieをKubernetesにデプロイします。\u0026rdquo;easydoggie\u0026rdquo;チャートは、すべての構成をインストールします。\n$ helm install --name easydoggie easydoggie/easydoggie $ kubectl get pods NAME READY STATUS RESTARTS AGE easydoggie-nginx-ingress-controller-749677776f-kb2fl 1/1 Running 0 30s easydoggie-nginx-ingress-default-backend-8686dd6ff7-qmgdv 1/1 Running 0 30s gitea-6dc55f758d-cwkt9 1/1 Running 0 31s nginx-64f88989bc-n97ml 1/1 Running 0 30s nginx-unit-5ff6499cb5-9ldnt 1/1 Running 0 30s node-cb997ff45-psj4n 1/1 Running 0 30s 必要なパッケージのみインストールしたい場合は、インストール対象のチャートを指定してインストールをしてください。以下は、Nginxだけをインストールする例です。\n$ helm install --name nginx easydoggie/nginx 個別インストール方法の詳細は、別ページを参照してください。\n使い方 2019年6月13日時点では、以下の構成サービスが起動します。 Web(nginx)へのアクセス http://\u0026lt;your_url\u0026gt;/easydoggie\nAPI(nginx unit)へのアクセス http://\u0026lt;your_url\u0026gt;/easydoggie/api\ngiteaへのアクセス http://\u0026lt;your_url\u0026gt;/gitea\nAdminerへのアクセス http://\u0026lt;your_url\u0026gt;/adminer\nKibanaへのアクセス http://\u0026lt;your_url\u0026gt;/kibana\nGrafanaへのアクセス http://\u0026lt;your_url\u0026gt;/grafana\n設定方法 構成ミドルウェアのパラメータ等の変更は、別ページを参照してください。\nライセンス MIT\n協賛 \n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/redis/",
	"title": "Redis",
	"tags": ["Redis"],
	"description": "",
	"content": " シングルマスター構成 マスター x 1、スレーブ x 0の構成例です。スレーブを利用しない場合は、cluster.enabledの値をfalseに設定します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: false    # values     Master 1   Slave 0   Master RDB x   Master AOF o    \n   接続先 ホスト ポート     Master redis-master 6379    マスター、スレーブ構成 マスター x 1、スレーブ x 2の構成例です。スレーブを利用する場合は、cluster.enabledをtrueに設定します。スレーブのノード数は、cluser.slaveCountで設定します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2    # values     Master 1   Slave 2   Master RDB x   Master AOF o   Slave RDB x   Slave AOF o    \n   接続先 ホスト ポート     Master redis-master 6379   Slave redis-slave 6379    マスター、スレーブの切り離し間隔を調整する マスター、スレーブのPodをServiceから切り離す時間を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Serviceから切り離されます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 5 5   Slave 10 5    $ kubectl describe pods/redis-master-0|grep Readiness: Readiness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=1s period=5s #success=1 #failure=5 $ kubectl describe pods/redis-slave-0|grep Readiness: Readiness: exec [sh -c /health/ping_local_and_master.sh 5] delay=5s timeout=10s period=10s #success=1 #failure=5 以下の例では、マスター、スレーブともに3秒間隔 x 3回のヘルスチェック失敗に設定を変更します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2 master: readinessProbe: periodSeconds: 3 failureThreshold: 3 slave: readinessProbe: periodSeconds: 3 failureThreshold: 3$ kubectl describe pods/redis-master-0|grep Readiness: Readiness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=1s period=3s #success=1 #failure=3 $ kubectl describe pods/redis-slave-0|grep Readiness: Readiness: exec [sh -c /health/ping_local_and_master.sh 5] delay=5s timeout=10s period=3s #success=1 #failure=3 マスター、スレーブの再起動間隔を調整する マスター、スレーブのPodを再起動する間隔を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Podの再起動が行われます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 5 5   Slave 10 5    $ kubectl describe pods/redis-master-0|grep Liveness: Liveness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=5s period=5s #success=1 #failure=5 $ kubectl describe pods/redis-slave-0|grep Liveness: Liveness: exec [sh -c /health/ping_local_and_master.sh 5] delay=30s timeout=5s period=10s #success=1 #failure=5 以下の例では、マスター、スレーブともに3秒間隔 x 3回のヘルスチェック失敗に設定を変更します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2 master: livenessProbe: periodSeconds: 3 failureThreshold: 3 slave: livenessProbe: periodSeconds: 3 failureThreshold: 3$ kubectl describe pods/redis-master-0|grep Liveness: Liveness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=5s period=3s #success=1 #failure=3 $ kubectl describe pods/redis-slave-0|grep Liveness: Liveness: exec [sh -c /health/ping_local_and_master.sh 5] delay=30s timeout=5s period=3s #success=1 #failure=3"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/mysql/",
	"title": "Mysql",
	"tags": ["MySQL"],
	"description": "",
	"content": " シングルマスター構成 マスター x 1、スレーブ x 0の構成例です。スレーブを利用しない場合は、replication.enabledの値をfalseに設定します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: false    接続先 ホスト ポート     Master \u0026lt;helm_name\u0026gt;-mysql 3306    マスター、スレーブ構成 マスター x 1、スレーブ x 2の構成例です。スレーブを利用する場合は、replication.enabledをtrueに設定します。スレーブのノード数は、slave.replicasで設定します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true slave: replicas: 2    接続先 ホスト ポート     Master \u0026lt;helm_name\u0026gt;-mysql 3306   Slave \u0026lt;helm_name\u0026gt;-mysql-slave 3306    マスター、スレーブの切り離し間隔を調整する マスター、スレーブのPodをServiceから切り離す時間を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Serviceから切り離されます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 10 3   Slave 10 3    $ kubectl describe pods/mysql-mysql-master-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=30s timeout=1s period=10s #success=1 #failure=3 $ kubectl describe pods/mysql-mysql-slave-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=30s timeout=1s period=10s #success=1 #failure=3 以下の例では、マスター、スレーブともに5秒間隔 x 5回のヘルスチェック失敗に設定を変更します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true master: readinessProbe: periodSeconds: 5 failureThreshold: 5 slave: replicas: 1 readinessProbe: periodSeconds: 5 failureThreshold: 5$ kubectl describe pods/mysql-mysql-master-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=30s timeout=1s period=5s #success=1 #failure=5 $ kubectl describe pods/mysql-mysql-slave-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=30s timeout=1s period=5s #success=1 #failure=5 マスター、スレーブの再起動間隔を調整する マスター、スレーブのPodを再起動する間隔を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Podの再起動が行われます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 10 3   Slave 10 3    $ kubectl describe pods/mysql-mysql- master-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=120s timeout=1s period=10s #success=1 #failure=3 $ kubectl describe pods/mysql-mysql-slave-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=120s timeout=1s period=10s #success=1 #failure=3 以下の例では、マスター、スレーブともに5秒間隔 x 5回のヘルスチェック失敗に設定を変更します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true master: livenessProbe: periodSeconds: 5 failureThreshold: 5 slave: replicas: 1 livenessProbe: periodSeconds: 5 failureThreshold: 5$ kubectl describe pods/mysql-mysql-master-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=120s timeout=1s period=5s #success=1 #failure=5 $ kubectl describe pods/mysql-mysql-slave-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=120s timeout=1s period=5s #success=1 #failure=5"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/password/grafana/",
	"title": "Grafana",
	"tags": [],
	"description": "",
	"content": " Grafana 以下のコマンドでadminユーザの初期パスワードを取得します。\n$ kubectl get secret grafana -o jsonpath=\u0026#34;{.data.admin-password}\u0026#34; | base64 --decode ; echo"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/mysql/",
	"title": "Mysql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/redis/",
	"title": "Redis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]