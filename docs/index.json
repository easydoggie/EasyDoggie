[
{
	"uri": "https://easydoggie.github.io/EasyDoggie/uninstall/uninstall/",
	"title": "Uninstall",
	"tags": ["Adminer", "drone", "Elasticsearch", "Fluentd", "Gitea", "Kibana", "MySQL", "Nginx", "Nginx Ingress", "Nginx Unit", "Node.js", "Redis"],
	"description": "",
	"content": " アンインストール 完全に消去する場合は、--purgeオプションを利用します。には削除対象のリリース名を指定します。\n$ helm delete --purge \u0026lt;release_name\u0026gt;"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": "Helm Chartごとの個別インストール方法を説明しています。\nHelmのローカルリポジトリ情報を最新にするために、インストールの実行前にリポジトリのアップデートを行ってください。\n$ helm repo update 設定の変更は、以下の2通りがあります。\n helm installコマンドの--setオプションで変更する。 helm inspect valuesコマンドでvalues.yamlを取得して、helm installコマンドの-fオプションで変更したvalues.yamlを指定する。  一次的な変更の場合は、--setオプションを利用する方法が手軽に確認を行うことができます。 恒久的な変更の場合は、Git等でvalues.yamlを管理できる-fオプションを利用する方法をお勧めします。\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/uninstall/",
	"title": "Uninstall",
	"tags": [],
	"description": "",
	"content": "個別のアンインストール方法\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/",
	"title": "Config",
	"tags": [],
	"description": "",
	"content": "設定変更の方法\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/password/",
	"title": "Password",
	"tags": [],
	"description": "",
	"content": "初期パスワード\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": " 構成例 システム構成の例\n WebAPサーバ(Web3層構成)  "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/prometheus/",
	"title": "Prometheus",
	"tags": [],
	"description": "",
	"content": "作成中\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/nodejs/",
	"title": "Nodejs",
	"tags": [],
	"description": "",
	"content": "作成中\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/kibana/",
	"title": "Kibana",
	"tags": [],
	"description": "",
	"content": "作成中\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/gitea/",
	"title": "Gitea",
	"tags": [],
	"description": "",
	"content": "作成中\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/fluentd/",
	"title": "Fluentd",
	"tags": [],
	"description": "",
	"content": "作成中\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/uninstall/prometheus/",
	"title": "Prometheus",
	"tags": ["Prometheuses"],
	"description": "",
	"content": " Prometheus Operatorの完全アンインストール helm deleteコマンドだけだと、kunernetesのCRD(Custom Resource Definitions)は削除されません。 CRDはkubectl delete crdコマンドで個別に削除をします。\n$ helm delete --purge \u0026lt;release_name\u0026gt; $ kubectl delete crd prometheuses.monitoring.coreos.com $ kubectl delete crd prometheusrules.monitoring.coreos.com $ kubectl delete crd servicemonitors.monitoring.coreos.com $ kubectl delete crd alertmanagers.monitoring.coreos.com"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/",
	"title": "EasyDoggie",
	"tags": [],
	"description": "",
	"content": " EasyDoggie pre-α版を公開中。\nバグ、機能要望などはこちら。\nゲームインフラは、もっと楽にできる！ スマートフォン向けゲームはレッドオーシャン化が進み、小規模の開発会社では生き残るのが難しくなっています。斬新なゲームアイデアを実現するためにゲームインフラとしてどのような貢献ができるのでしょうか？現実問題として、以下のような悩みを抱えている開発会社が多いのではないでしょうか。\n ・　サーバーサイドのプログラマですが、インフラも兼務しています。インフラの構築、運用に時間がかかってサーバサイドのプログラミングが進みません\n・　インフラの初心者しか会社にいません。ミドルウェアのパラメータ設計の方法がわかりません。全部デフォルト値でよいですか？\n・　コンテナやマイクロサービスに興味があります。でもデプロイや監視の方法がわからないです。\n・　インフラの設計、構築、運用に実績のある外部ベンダに依頼したいのですが、外注コストが心配です。\n このようなインフラ設計、構築、運用の悩みを解決するのに、構築済みのコンテナを再利用する方法があります。\nそう、EasyDoggieなら設計済みコンテナからCI/CD、運用監視まで、そろっています！\nEasyDoggie構成イメージ セットアップ方法 Helmのインストール EasyDoggieはKubernetes上で動作します。コンテナの初期設定はHelmを利用してインストールを行います。 初めにHelmのインストールと初期設定を行います。 Helmについては、ブログでも紹介をしています。Helmの概要を知りたい場合に、参考にしてください。\n$ wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz $ tar xvfz helm-v2.13.1-linux-amd64.tar.gz $ sudo mv linux-amd64/helm /usr/local/bin/helm $ helm init Helmのインストールについては、ブログでも紹介をしているので、参考にしてください。 GKEなどRBACのアクセス制御が有効になっている環境では、Tillerをインストール(helm init)する前にサービスアカウントの設定を行ってください。また、helm initを行うときにサービスアカウントの指定オプションを追加してください。\n$ kubectl apply -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/serviceaccount/helm-account.yaml $ helm init --service-account helm Helmリポジトリの追加 EasyDoggie用のHelmリポジトリを追加します。\n$ helm repo add easydoggie https://easydoggie.github.io/helm-repo/releases $ helm repo list NAME URL stable https://kubernetes-charts.storage.googleapis.com local http://127.0.0.1:8879/charts easydoggie https://easydoggie.github.io/helm-repo/releases EasyDoggieのインストール Helmを利用してEasyDoggieをKubernetesにデプロイします。\u0026rdquo;easydoggie\u0026rdquo;チャートは、すべての構成をインストールします。\n$ helm install --name easydoggie easydoggie/easydoggie $ kubectl get pods NAME READY STATUS RESTARTS AGE easydoggie-nginx-ingress-controller-749677776f-kb2fl 1/1 Running 0 30s easydoggie-nginx-ingress-default-backend-8686dd6ff7-qmgdv 1/1 Running 0 30s gitea-6dc55f758d-cwkt9 1/1 Running 0 31s nginx-64f88989bc-n97ml 1/1 Running 0 30s nginx-unit-5ff6499cb5-9ldnt 1/1 Running 0 30s node-cb997ff45-psj4n 1/1 Running 0 30s 必要なパッケージのみインストールしたい場合は、インストール対象のチャートを指定してインストールをしてください。以下は、Nginxだけをインストールする例です。\n$ helm install --name nginx easydoggie/nginx 個別インストール方法の詳細は、別ページを参照してください。\n使い方 2019年07月04日時点では、以下の構成サービスが起動します。 Web(nginx)へのアクセス http://easydoggie.example.com\nAPI(nginx unit)へのアクセス http://easydoggie.example.com/api\ngiteaへのアクセス http://gitea.example.com\nAdminerへのアクセス http://adminer.example.com\nKibanaへのアクセス http://kibana.example.com\nGrafanaへのアクセス http://grafana.example.com\nDroneへのアクセス http://drone.example.com\n設定方法 構成ミドルウェアのパラメータ等の変更は、別ページを参照してください。\nライセンス MIT\n協賛 \n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/redis/",
	"title": "Redis",
	"tags": ["Redis"],
	"description": "",
	"content": " シングルマスター構成 マスター x 1、スレーブ x 0の構成例です。スレーブを利用しない場合は、cluster.enabledの値をfalseに設定します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: false    # values     Master 1   Slave 0   Master RDB x   Master AOF o    \n   接続先 ホスト ポート     Master redis-master 6379    マスター、スレーブ構成 マスター x 1、スレーブ x 2の構成例です。スレーブを利用する場合は、cluster.enabledをtrueに設定します。スレーブのノード数は、cluser.slaveCountで設定します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2    # values     Master 1   Slave 2   Master RDB x   Master AOF o   Slave RDB x   Slave AOF o    \n   接続先 ホスト ポート     Master redis-master 6379   Slave redis-slave 6379    マスター、スレーブの切り離し間隔を調整する マスター、スレーブのPodをServiceから切り離す時間を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Serviceから切り離されます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 5 5   Slave 10 5    $ kubectl describe pods/redis-master-0|grep Readiness: Readiness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=1s period=5s #success=1 #failure=5 $ kubectl describe pods/redis-slave-0|grep Readiness: Readiness: exec [sh -c /health/ping_local_and_master.sh 5] delay=5s timeout=10s period=10s #success=1 #failure=5 以下の例では、マスター、スレーブともに3秒間隔 x 3回のヘルスチェック失敗に設定を変更します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2 master: readinessProbe: periodSeconds: 3 failureThreshold: 3 slave: readinessProbe: periodSeconds: 3 failureThreshold: 3$ kubectl describe pods/redis-master-0|grep Readiness: Readiness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=1s period=3s #success=1 #failure=3 $ kubectl describe pods/redis-slave-0|grep Readiness: Readiness: exec [sh -c /health/ping_local_and_master.sh 5] delay=5s timeout=10s period=3s #success=1 #failure=3 マスター、スレーブの再起動間隔を調整する マスター、スレーブのPodを再起動する間隔を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Podの再起動が行われます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 5 5   Slave 10 5    $ kubectl describe pods/redis-master-0|grep Liveness: Liveness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=5s period=5s #success=1 #failure=5 $ kubectl describe pods/redis-slave-0|grep Liveness: Liveness: exec [sh -c /health/ping_local_and_master.sh 5] delay=30s timeout=5s period=10s #success=1 #failure=5 以下の例では、マスター、スレーブともに3秒間隔 x 3回のヘルスチェック失敗に設定を変更します。\n# file: redis/redis/values.yaml redis: usePassword: false cluster: enabled: true slaveCount: 2 master: livenessProbe: periodSeconds: 3 failureThreshold: 3 slave: livenessProbe: periodSeconds: 3 failureThreshold: 3$ kubectl describe pods/redis-master-0|grep Liveness: Liveness: exec [sh -c /health/ping_local.sh 5] delay=5s timeout=5s period=3s #success=1 #failure=3 $ kubectl describe pods/redis-slave-0|grep Liveness: Liveness: exec [sh -c /health/ping_local_and_master.sh 5] delay=30s timeout=5s period=3s #success=1 #failure=3"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/mysql/",
	"title": "Mysql",
	"tags": ["MySQL"],
	"description": "",
	"content": " シングルマスター構成 マスター x 1、スレーブ x 0の構成例です。スレーブを利用しない場合は、replication.enabledの値をfalseに設定します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: false    接続先 ホスト ポート     Master \u0026lt;helm_name\u0026gt;-mysql 3306    マスター、スレーブ構成 マスター x 1、スレーブ x 2の構成例です。スレーブを利用する場合は、replication.enabledをtrueに設定します。スレーブのノード数は、slave.replicasで設定します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true slave: replicas: 2    接続先 ホスト ポート     Master \u0026lt;helm_name\u0026gt;-mysql 3306   Slave \u0026lt;helm_name\u0026gt;-mysql-slave 3306    マスター、スレーブの切り離し間隔を調整する マスター、スレーブのPodをServiceから切り離す時間を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Serviceから切り離されます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 10 3   Slave 10 3    $ kubectl describe pods/mysql-mysql-master-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=30s timeout=1s period=10s #success=1 #failure=3 $ kubectl describe pods/mysql-mysql-slave-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=30s timeout=1s period=10s #success=1 #failure=3 以下の例では、マスター、スレーブともに5秒間隔 x 5回のヘルスチェック失敗に設定を変更します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true master: readinessProbe: periodSeconds: 5 failureThreshold: 5 slave: replicas: 1 readinessProbe: periodSeconds: 5 failureThreshold: 5$ kubectl describe pods/mysql-mysql-master-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=30s timeout=1s period=5s #success=1 #failure=5 $ kubectl describe pods/mysql-mysql-slave-0|grep Readiness: Readiness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=30s timeout=1s period=5s #success=1 #failure=5 マスター、スレーブの再起動間隔を調整する マスター、スレーブのPodを再起動する間隔を調整します。デフォルトでは以下のヘルスチェック間隔と連続失敗回数を満たすと、Podの再起動が行われます。\n   node ヘルスチェック間隔(秒) 失敗回数     Master 10 3   Slave 10 3    $ kubectl describe pods/mysql-mysql- master-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=120s timeout=1s period=10s #success=1 #failure=3 $ kubectl describe pods/mysql-mysql-slave-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=120s timeout=1s period=10s #success=1 #failure=3 以下の例では、マスター、スレーブともに5秒間隔 x 5回のヘルスチェック失敗に設定を変更します。\n# file: mysql/mysql/values mysql: db: name: testdb root: password: easydoggie replication: enabled: true master: livenessProbe: periodSeconds: 5 failureThreshold: 5 slave: replicas: 1 livenessProbe: periodSeconds: 5 failureThreshold: 5$ kubectl describe pods/mysql-mysql-master-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_ROOT_PASSWORD] delay=120s timeout=1s period=5s #success=1 #failure=5 $ kubectl describe pods/mysql-mysql-slave-0|grep Liveness: Liveness: exec [sh -c exec mysqladmin status -uroot -p$MYSQL_MASTER_ROOT_PASSWORD] delay=120s timeout=1s period=5s #success=1 #failure=5"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/password/grafana/",
	"title": "Grafana",
	"tags": ["Grafana"],
	"description": "",
	"content": " Grafana 以下のコマンドでadminユーザの初期パスワードを取得します。\n$ kubectl get secret grafana -o jsonpath=\u0026#34;{.data.admin-password}\u0026#34; | base64 --decode ; echo"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/examples/webap/",
	"title": "Webap",
	"tags": [],
	"description": "",
	"content": " WebAPサーバ(Web3層構成) 目次  ローカル開発環境 ステージング/本番環境  ローカル開発環境 ローカルの開発環境を想定した構成です。すべての構成をKubernetes上にインストールします。\n   構成要素 内容     Ingress Controller Nginx Ingress   Web Nginx   AP Nginx Unit   DB MySQL    $ helm install --name ingress easydoggie/ingress $ helm install --name nginx easydoggie/nginx $ helm install --name mysql easydoggie/mysql WebとAPは同じPodで構成されているため、1つのHelmチャート(easydoggie/nginx)でインストールされます。\nステージング/本番環境 GCPなどのパブリッククラウドでの利用を想定した構成です。Ingressコントローラとデータベースは、パブリッククラウドのマネジメントサービスを利用します。以下はGCPでの構成例です。\n   構成要素 内容     Ingress Controller Cloud LoadBalancing   web Nginx   AP Nginx Unit   DB Cloud SQL    $ helm install --name nginx easydoggie/nginx $ helm install --name ingress -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/ingress/ingress/values-web.yaml easydoggie/ingress  Cloud LoadBalancingはIngressのインストールで作成されます。 Cloud SQLは自動では起動しません。gcloudもしくはコンソールからサービスを作成してください。  "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/adminer/",
	"title": "Adminer",
	"tags": ["Adminer"],
	"description": "",
	"content": " サービスの構成、初期化方法の変更 以下の表はAdminerの変更可能なパラーメータとデフォルト値の一覧です。    パラメータ デフォルト 説明     replicaCount 1 レプリカセットの数   image.repository easydoggie/adminer Adminerのイメージ名   image.tag 0.1.0 Adminerイメージのタグ名   image.pullPolicy IfNotPresent イメージのプルポリシー   imageNginx.repository nginx Adminer用リバースプロキシのイメージ名   imageNginx.tag 1.15.12-alpine Adminer用リバースプロキシイメージのタグ名   imageNginx.pullPolicy IfNotPresent Adminer用リバースプロキシイメージのプルポリシー   nameOverride \u0026rdquo;\u0026rdquo; チャート名を上書きする場合に使用する   fullnameOverride adminer アプリケーション名を上書きする場合に使用する。指定しない場合は、チャート名-リリース名が設定される   service.type NodePort Serviceのタイプ   service.port 80 Serviceのポート   service.targetPort 80 Serviceのターゲットポート   appServer.port 8300 Adminerのポート   resources {} Podリソース使用量の管理   nodeSelector {} nodeSelectorの設定   tolerations [] tolerationsの設定   affinity {} affinityの設定    \n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/adminer/",
	"title": "Adminer",
	"tags": ["Adminer"],
	"description": "",
	"content": " Adminerはデータベースの管理ツールです。phpMyAdminの代替として利用することができます。 対応しているデータベースは以下の通りです。\n MySQL MariaDB PostgreSQL SQLite MS SQL Oracle Firebird SimpleDB Elasticsearch MongoDB  TL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/adminer# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/adminer はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でAdminerにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name \u0026lt;release_name\u0026gt; easydoggie/adminer \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\nServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set service.type=LoadBalancer easydoggie/adminer Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/elasticsearch/",
	"title": "Elasticsearch",
	"tags": ["Elasticsearch"],
	"description": "",
	"content": " デフォルトの設定 # file: elasticsearch/elasticsearch/values.yaml elasticsearch: roles: ingest: false replicas: 1 resources: requests: memory: 128Mi    パラメータ 初期値 説明     elasticsearch.roles.ingest false ElasticsearchのIngest nodeを無効にします。有効にする場合はtrueに設定します。   elasticsearch.replicas 1 Elasticsearchのレプリカ数   elasticsearch.resources.requests.memory 128Mi メモリ使用量の上限    "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/drone/",
	"title": "Drone",
	"tags": ["Drone"],
	"description": "",
	"content": " デフォルトの設定 #file: drone/values.yaml drone: service: type: NodePort server: host: drone.localhost sourceControl: provider: gitea gitea: server: http://gitea:3000 sharedSecret: 45f7a425dc0595bdca3af34ef97ebaa4    パラメータ 初期値 説明     drone.service.type NodePort Serviceタイプ   drone.server.host drone.localhost DroneのWebUIのホスト名   drone.sourceControl.provider gitea ソース管理をしているプロバイダ   drone.sourceControl.gitea.server http://gitea:3000 Giteaサーバのアドレス   drone.sharedSecret 45f7a425dc0595bdca3af34ef97ebaa4 DroneとGiteaの共有秘密鍵    設定変更の例 ServiceタイプをLoadBalancerに変更する 外部からのアクセスにIngressではなくLoadBalancerを使う場合は、Serviceタイプの変更を行います。\n以下のファイルをHelmクライアントを実行するサーバに作成します。\n# file: edit01-values.yaml drone: service: type: LoadBalancer インストールを実行します。\n$ helm install --name drone -f edit01-values.yaml easydoggie/drone"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/drone/",
	"title": "Drone",
	"tags": ["Drone"],
	"description": "",
	"content": " DroneはCI/CDを行うためのツールです。\nデフォルトのソースリポジトリはDroneと同じKubernetes上のGiteaを参照します。参照先のリポジトリを変更したい場合は、Configのページを参照してください。\nTL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/drone# Ingressを使わないでアクセス $ helm install --set drone.service.type=LoadBalancer easydoggie/drone はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でDroneにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name \u0026lt;release_name\u0026gt; easydoggie/drone \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\nServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set drone.service.type=LoadBalancer easydoggie/drone Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/elasticsearch/",
	"title": "Elasticsearch",
	"tags": ["Elasticsearch"],
	"description": "",
	"content": " Elasticsearchは分散型RESTful検索/分析エンジンです。\nEasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを検索/分析する用途で利用することを想定しています。\n動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてClusterIPを使う場合(デフォルト) Elasticsearchはローカルでのアクセスのみ想定しているため、サービスタイプはClusterIPとして起動します。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/elasticsearch デフォルトではシングルマスタのノードが起動します。 クラスタのノード数の変更などは、設定変更のページを参照してください。\nChartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/fluentd/",
	"title": "Fluentd",
	"tags": ["Fluentd"],
	"description": "",
	"content": " Fluentdはログのデータを収集します。\nEasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを収集する用途で利用することを想定しています。\n動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてClusterIPを使う場合(デフォルト) Fluentdはローカルでのアクセスのみを想定しているため、サービスタイプはClusterIPとして起動します。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/fluentd デフォルトでは同じKuberneteクラスタ内のElasticsearchに収集したデータを転送します。 転送先の設定などの変更を行う場合は、設定変更のページを参照してください。\nChartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/gitea/",
	"title": "Gitea",
	"tags": ["Gitea"],
	"description": "",
	"content": " GiteaはセルフホストのGitサーバです。\nTL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/gitea# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/gitea はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 デフォルトのインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でGiteaにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/gitea ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set service.type=LoadBalancer easydoggie/gitea Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/ingress/",
	"title": "Ingress",
	"tags": ["Ingress", "Nginx Ingress"],
	"description": "",
	"content": " サービスの構成、初期化方法の変更 以下の表はIngressおよびNGINX Ingressの変更可能なパラーメータとデフォルト値の一覧です。    パラメータ デフォルト 説明     nginx-ingress.controller.service.type LoadBalancer Nginx Ingressのサービスタイプ   ingress.enabled true ingressリソースを有効にする場合はtrue、無効にする場合はfalse   ingress.nginxController true IngressコントローラとしてNginx Ingressを利用する場合はtrue, 利用しない場合はfalse   ingress.annotations {} Ingressのannotaions   ingress.hosts.nginx.host easydoggie.example.com NINGXのホスト名   ingress.hosts.nginx.enabled true NGINXへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.nginx.serviceName nginx NGINXのService名   ingress.hosts.nginx.servicePort 80 NGINXのSerivceポート番号   ingress.hosts.gitea.host gitea.example.com Giteaのホスト名   ingress.hosts.gitea.enabled true Giteaへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.gitea.serviceName gitea GiteaのService名   ingress.hosts.gitea.servicePort 3000 GiteaのServiceポート番号   ingress.hosts.adminer.host adminer.example.com Adminerのホスト名   ingress.hosts.adminer.enabled true Adminerへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.adminer.serviceName adminer AdminerのService名   ingress.hosts.adminer.servicePort 80 AdminerのServiceポート番号   ingress.hosts.kibana.host kibana.example.com Kibanaのホスト名   ingress.hosts.kibana.enabled true Kibanaへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.kibana.serviceName kibana-kibana KibanaのService名   ingress.hosts.kibana.servicePort 5601 KibanaのServiceポート番号   ingress.hosts.grafana.host grafana.example.com Grafanaのホスト名   ingress.hosts.grafana.enabled true Grafanaへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.grafana.serviceName grafana GrafanaのService名   ingress.hosts.grafana.servicePort 80 GrafanaのServiceポート番号   ingress.hosts.drone.host drone.example.com Droneのホスト名   ingress.hosts.drone.enabled true Droneへのアクセスルールを有効にする場合はtrue, 無効にする場合はfalse   ingress.hosts.drone.serviceName drone-drone DroneのService名   ingress.hosts.drone.servicePort 80 DroneのServiceポート番号   ingress.tls [] TLS設定    \nvalues-false.yaml values-false.yamlは、すべてのIngressルールを無効に設定したValueファイルです。--setオプションで個別のルールを有効化して使用します。\n# NGINXのルールだけを有効化した例 $ helm install --name \u0026lt;release_name\u0026gt; -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/ingress/ingress/values-false.yaml --set ingress.hosts.nginx.enabled=true easydoggie/ingress  values-false.yamlファイルは、Nginx Ingressも無効化してあります。マネジメントサービスのIngressコントローラの使用もしくはNginx Ingressの有効化を行ってください。\n "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/ingress/",
	"title": "Ingress",
	"tags": ["Ingress", "Nginx Ingress"],
	"description": "",
	"content": " 外部（インターネット）からのアクセス経路としてIngressを利用する場合に設定します。\nはじめに  デフォルトではEasyDoggieとして設定している、すべてのルールがIngressリソースに設定されます。 Ingressリソースのルールを有効もしくは無効にするには、Ingressの設定を参照してください。 GKEなどのマネージドKubernetes環境でIngressを利用する場合は、ファイアウォールの接続許可が必要な場合があります。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール IngressコントローラとしてNginx Ingressを利用する場合 デフォルトでは、IngressとNginx Ingressコントローラがインストールされます。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/ingress Ingressだけをインストールする場合 GKEなどIngressコントローラとしてマネジメントLBなどを利用する場合のパターンです。Ingressのみ必要な場合は、--setオプションでNginx-Ingressのインストールをfalseに設定にします。\n$ helm install --name \u0026lt;release_name\u0026gt; --set ingress.nginxController=false easydoggie/ingress Nginx IngressおよびすべてのIngressルールを無効化したvalues.yamlを利用することもできます。必要なルールは--setオプションで有効にすることができます。\n以下は、Nginxのルールのみ有効にした実行例です。\n$ helm install --name \u0026lt;release_name\u0026gt; -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/ingress/ingress/values-false.yaml --set ingress.hosts.nginx.enabled=true easydoggie/ingress Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/kibana/",
	"title": "Kibana",
	"tags": ["Kibana"],
	"description": "",
	"content": " Kibanaはデータを可視化するツールです。\nEasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを可視化する用途で利用することを想定しています。\nKibanaのインストール ServiceとしてNoadPortを使う場合(デフォルト) \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/kibana  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でKibanaにアクセスする場合は、別途Ingressのインストールを行ってください。  ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set kibana.service.type=LoadBalancer easydoggie/kibana"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/mysql/",
	"title": "Mysql",
	"tags": ["MySQL"],
	"description": "",
	"content": " MySQLはデータベース管理システムです。\nシングルマスタもしくはマスタ-スレープ構成のMySQLをインストールすることができます。\nMySQLのインストール \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/mysql デフォルトではマスター x 1、スレーブ x 1のコンテナが起動します。 スレーブのノード数の変更などは、設定変更のページを参照してください。\n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/nginx/",
	"title": "NGINX, NGINX Unit",
	"tags": ["NGINX", "NGINX Unit"],
	"description": "",
	"content": " サービスの構成、初期化方法の変更 以下の表はNGINXおよびNGINX Unitの変更可能なパラーメータとデフォルト値の一覧です。    パラメータ デフォルト 説明     replicaCount 1 レプリカセットの数   image.repository nginx NGINXのイメージ名   image.tag 1.16.0-alpine NGINXイメージのタグ名   image.pullPolicy IfNotPresent イメージのプルポリシー   imageUnit.repository nginx/unit NGINX Unitのイメージ名   imageUnit.tag 1.9.0-full NGINX Unitのタグ名   imageUnit.pullPolicy IfNotPresent イメージのプルポリシー   imageInit.alpine.repository alpine/git 初期化コンテナ(git clone)用のイメージ名   imageInit.alpine.tag latest 初期化イメージのタグ名   imageInit.alpine.pullPolicy IfNotPresent 初期化イメージのプルポリシー   imageInit.alpine.command |-\n- \u0026quot;\u0026quot; 初期化コンテナのEntryPoint   imageInit.alpine.args |-\n- \u0026quot;clone\u0026quot;\n- \u0026quot;https://github.com/easydoggie/testapp.git\u0026quot;\n- \u0026quot;/tmp/git\u0026quot; 初期化コンテナのCMD   imageInit.python.repository python 初期化コンテナ(python)用のイメージ名   imageInit.python.tag 3.5-alpine 初期化イメージのタグ名   imageInit.python.pullPolicy IfNotPresent 初期化イメージのプルポリシー   imageInit.python.command |-\n- \u0026quot;/bin/sh\u0026quot;\n- \u0026quot;-c\u0026quot;\n- \u0026quot;apk add git; \\\ngit clone https://github.com/easydoggie/testapp.git /tmp/git; \\\npython -m venv /tmp/git/python/venv; \\\n. /tmp/git/python/venv/bin/activate; \\\npip install redis\u0026quot; 初期化コンテナのEntryPoint   imageInit.python.args |-\n- \u0026quot;\u0026quot; 初期化イメージのCMD   appServer.enabled true NGINXとNGINX Unitを使う場合はtrue。NGINXだけを利用する場合はfalse。   appServer.port 8300 APサーバのポート   appServer.applications.name testapp アプリケーションの名前   appServer.applications.type python 3.5 アプリケーションのタイプ。external(GoまたはNode.jsの場合), java, php, python, ruby   appServer.applications.processes 1 アプリケーションのプロセス数   appServer.applications.workingDirectory /app/python アプリケーションのワーキングディレクトリ   appServer.applications.user www-data アプリケーションの実行ユーザ   appServer.applications.group www-data アプリケーションの実行グループ   appServer.applications.timeout 10 リクエストタイムアウト時間(秒)   appServer.applications.requests 1000 プロセス当たりの最大リクエスト数   appServer.applications.python.module index WSGIモジュール名   appServer.settings.headerReadTimeout 30 ヘッダリクエストのタイムアウト時間(秒)   appServer.settings.bodyReadTimeout 30 ボディデータの読み込みタイムアウト時間(秒)   appServer.settings.sendTimeout 30 レスポンス送信のタイムアウト時間(秒)   appServer.settings.idleTimeout 180 keep-aliveコネクションのタイムアウト時間(秒)   appServer.maxBodySize 8388608 クライアントリクエストの最大ボディサイズ(byte)   nameOverride \u0026quot;\u0026quot; チャート名を上書きする場合に使用する   fullnameOverride nginx アプリケーション名を上書きする場合に使用する。指定しない場合は、チャート名-リリース名が設定される   service.type NodePort Serviceのタイプ   service.port 80 Serviceのポート   service.targetPort 80 Serviceのターゲットポート   resources {} Podのリソース使用量の管理   nodeSelector {} nodeSelectorの設定   tolerations [] tolerationsの設定   affinity {} affinityの設定    \n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/nginx/",
	"title": "NGINX, NGINX Unit",
	"tags": ["NGINX", "NGINX Unit"],
	"description": "",
	"content": " NGINXは、オープンソースのWebサーバです。NGINX Unitは、複数言語に対応しているアプリケーションサーバです。デフォルトでは1つのPod内にNGINXとNGINX Unitのコンテナが起動します。\nTL;DR # NGINXとNGINX Unitをインストールして、NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/nginx# NGINXだけインストールして、NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install --set appServer.enabled=false easydoggie/nginx# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/nginx はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 以下のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でNginxにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール NGINXとNGINX Unitをインストールする場合(デフォルト) デフォルトでは、NGINXとNGINX Unitがインストールされます。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/nginx  NGINXおよびNGINX Unitの設定値は、デフォルトの値が設定されます。設定値を変更する場合は、NGINXの設定変更またはNGINX Unitの設定変更を参照してください。\n Nginxのみインストールする場合 Nginx Unitが不要な場合は、setオプションでNginx Unitのインストール設定をfalseにします。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set appServer.enabled=false easydoggie/nginx  NGINXの設定値は、デフォルトの値が設定されます。設定値を変更する場合は、NGINXの設定変更を参照してください。\n ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set service.type=LoadBalancer easydoggie/nginx  NGINXおよびNGINX Unitの設定値は、デフォルトの値が設定されます。設定値を変更する場合は、NGINXの設定変更またはNGINX Unitの設定変更を参照してください。\n Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/nodejs/",
	"title": "Node.js",
	"tags": ["Node.js"],
	"description": "",
	"content": " Node.jsのインストール ServiceとしてLoadBalancerを使う場合 デフォルトの設定では、Service.type=LoadBalancerとして起動します。 $ helm install --nama \u0026lt;release_name\u0026gt; easydoggie/node IngressとNginx Ingressを使う場合 IngressコントローラとしてNginx Ingressを使うパターンです。 IngressとNginx Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。また、ingress.kubernetes.io/ingress.classがnginxに指定されます。 $ helm install --name \u0026lt;release_name\u0026gt; \\ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-nginx-ingress.yaml easydoggie/node IngressとGKEなどのマネジメントIngressコントローラを使う場合 IngressコントローラとしてGKEなどのマネジメントロードバランサーを使うパターンです。 Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。 $ helm install --name \u0026lt;release_name\u0026gt; \\ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-ingress.yaml easydoggie/node"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/prometheus/",
	"title": "Prometheus",
	"tags": ["Prometheus"],
	"description": "",
	"content": " Prometheus Operatorのインストール Prometheusはモニタリングのツールです。このチャートでは以下のモニタリングツール一式がインストールされます。\n prometheus-operator prometheus alertmanager node-exporter kube-state-metrics grafana  GrafanaのServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name \u0026lt;release_name\u0026gt; easydoggie/prometheus \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でGrafanaにアクセスする場合は、別途Ingressのインストールを行ってください。  GrafanaのServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set prometheus-operator.grafana.service.type=LoadBalancer easydoggie/prometheus"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/config/proxysql/",
	"title": "Proxysql",
	"tags": ["ProxySQL"],
	"description": "",
	"content": " サービスの構成、初期化方法の変更 以下の表はProxySQLの変更可能なパラーメータとデフォルト値の一覧です。    パラメータ デフォルト 説明     replicaCount 1 レプリカセットの数   image.repository severalnines/proxysql ProxySQLのイメージ名   image.tag 2.0.4 ProxySQLイメージのタグ名   image.pullPolicy IfNotPresent イメージのプルポリシー   nameOverride \u0026rdquo;\u0026rdquo; チャート名を上書きする場合に使用する   fullnameOverride \u0026ldquo;proxysql\u0026rdquo; アプリケーション名を上書きする場合に使用する。指定しない場合は、チャート名-リリース名が設定される   service.type ClusterIP Serviceのタイプ   service.adminPort.port 6032 ProxySQLの管理用ポート   service.adminPort.name admin ProxySQLの管理ポート名   service.servicePort.port 6033 ProxySQLのサービス提供ポート   service.servicePort.name service ProxySQLのサービス提供ポート名   proxysql.servers - server: mysql-mysql\nhostgroup: 10\nport: 3306\nmaxConnections: 100\n- server: mysql-mysql-slave\nhostgroup: 20\nport: 3306\nmaxConnections: 100 ProxySQLの接続先サーバー情報の配列。\nserver:サーバ名、アドレス\nhostgroup:ホストグループ\nport: MySQLポート\nmaxConnections: Maxコネクション数   proxysql.users - user: testuser\npassword: easydoggie\nhostgroup: 10 ProxySQLの接続ユーザの配列\nuser: ユーザ名\npassword: パスワード\nhostgroup: デフォルトのホストグループ   proxysql.monitor.user testuser ProxySQLのモニター用ユーザ   proxysql.monitor.password easydoggie モニター用ユーザのパスワード   proxysql.admin.user admin ProxySQLの管理用ユーザ   proxysql.admin.password admin 管理用ユーザのパスワード   resources {} Podリソース使用量の管理   nodeSelector {} nodeSelectorの設定   tolerations [] tolerationsの設定   affinity {} affinityの設定    \n"
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/proxysql/",
	"title": "Proxysql",
	"tags": ["ProxySQL"],
	"description": "",
	"content": " ProxySQLはMySQLのプロキシです。GPLライセンスとして利用することができます。指定したクエリのルールに従って、ReadとWriteのクエリをMySQLサーバに振り分けます。アプリケーション側でMaster、Slaveのサーバ構成やフェイルオーバーを意識する必要がなくなり、DBの管理が簡単になります。 同様のMySQLプロキシとしてMaxScaleがあります。MaxScaleにはライセンス制限があるため、EasyDoggieではProxySQLを採用しています。\n動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール $ helm install --name \u0026lt;release_name\u0026gt; easydoggie/proxysql \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。MySQLの接続先の設定などは、設定変更のページを参照してください。\nChartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/install/redis/",
	"title": "Redis",
	"tags": ["Redis"],
	"description": "",
	"content": " Redisはインメモリのデータストアです。\nシングルマスタもしくはマスタ/スレーブ構成のRedisをインストールすることができます。\n動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール Master-Slave構成（デフォルト） デフォルトではマスター x 1、スレーブ x 2のPodが起動します。データの永続化領域としてEmptyDirを利用します。 \u0026lt;release_name\u0026gt;には任意のリリース名を指定します。\n$ helm install --name \u0026lt;release_name\u0026gt; easydoggie/redis スレーブのノード数の変更などは、設定変更のページを参照してください。\nMasterのみの構成 マスター1台のみの構成です。--setオプションでクラスタの利用をfalseに設定します。データの永続化領域としてEmptyDirを利用します。\n$ helm install --name \u0026lt;release_name\u0026gt; --set redis.cluster.enabled=false easydoggie/redis Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。\n$ helm delete \u0026lt;release_name\u0026gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。\n$ helm delete --purge \u0026lt;release_name\u0026gt; "
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/adminer/",
	"title": "Adminer",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/drone/",
	"title": "Drone",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/elasticsearch/",
	"title": "Elasticsearch",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/fluentd/",
	"title": "Fluentd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/gitea/",
	"title": "Gitea",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/grafana/",
	"title": "Grafana",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/ingress/",
	"title": "Ingress",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/kibana/",
	"title": "Kibana",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/mysql/",
	"title": "Mysql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/nginx/",
	"title": "Nginx",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/nginx-ingress/",
	"title": "Nginx Ingress",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/nginx-unit/",
	"title": "Nginx Unit",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/node.js/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/prometheus/",
	"title": "Prometheus",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/prometheuses/",
	"title": "Prometheuses",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/proxysql/",
	"title": "Proxysql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/redis/",
	"title": "Redis",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://easydoggie.github.io/EasyDoggie/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]