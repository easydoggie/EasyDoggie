<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Install on EasyDoggie</title>
    <link>https://easydoggie.github.io/EasyDoggie/install/</link>
    <description>Recent content in Install on EasyDoggie</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Jun 2019 17:54:31 +0900</lastBuildDate>
    
	<atom:link href="https://easydoggie.github.io/EasyDoggie/install/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adminer</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/adminer/</link>
      <pubDate>Tue, 18 Jun 2019 15:18:56 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/adminer/</guid>
      <description>Adminerはデータベースの管理ツールです。phpMyAdminの代替として利用することができます。 対応しているデータベースは以下の通りです。
 MySQL MariaDB PostgreSQL SQLite MS SQL Oracle Firebird SimpleDB Elasticsearch MongoDB  TL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/adminer# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/adminer はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でAdminerにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/adminer &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set service.</description>
    </item>
    
    <item>
      <title>Drone</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/drone/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:05 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/drone/</guid>
      <description>DroneはCI/CDを行うためのツールです。
デフォルトのソースリポジトリはDroneと同じKubernetes上のGiteaを参照します。参照先のリポジトリを変更したい場合は、Configのページを参照してください。
TL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/drone# Ingressを使わないでアクセス $ helm install --set drone.service.type=LoadBalancer easydoggie/drone はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でDroneにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/drone &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set drone.service.type=LoadBalancer easydoggie/drone Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/elasticsearch/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:15 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/elasticsearch/</guid>
      <description> Elasticsearchは分散型RESTful検索/分析エンジンです。
EasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを検索/分析する用途で利用することを想定しています。
動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてClusterIPを使う場合(デフォルト) Elasticsearchはローカルでのアクセスのみ想定しているため、サービスタイプはClusterIPとして起動します。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/elasticsearch デフォルトではシングルマスタのノードが起動します。 クラスタのノード数の変更などは、設定変更のページを参照してください。
Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。
$ helm delete --purge &amp;lt;release_name&amp;gt; </description>
    </item>
    
    <item>
      <title>Fluentd</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/fluentd/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:24 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/fluentd/</guid>
      <description> Fluentdはログのデータを収集します。
EasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを収集する用途で利用することを想定しています。
動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてClusterIPを使う場合(デフォルト) Fluentdはローカルでのアクセスのみを想定しているため、サービスタイプはClusterIPとして起動します。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/fluentd デフォルトでは同じKuberneteクラスタ内のElasticsearchに収集したデータを転送します。 転送先の設定などの変更を行う場合は、設定変更のページを参照してください。
Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。
$ helm delete --purge &amp;lt;release_name&amp;gt; </description>
    </item>
    
    <item>
      <title>Gitea</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/gitea/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:32 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/gitea/</guid>
      <description>GiteaはセルフホストのGitサーバです。
TL;DR # NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/gitea# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/gitea はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 デフォルトのインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でGiteaにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール ServiceとしてNoadPortを使う場合(デフォルト) &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/gitea ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set service.type=LoadBalancer easydoggie/gitea Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。</description>
    </item>
    
    <item>
      <title>Ingress</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/ingress/</link>
      <pubDate>Tue, 18 Jun 2019 15:20:03 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/ingress/</guid>
      <description> 外部（インターネット）からのアクセス経路としてIngressを利用する場合に設定します。
はじめに  デフォルトではEasyDoggieとして設定している、すべてのルールがIngressリソースに設定されます。 Ingressリソースのルールを有効もしくは無効にするには、Ingressの設定を参照してください。 GKEなどのマネージドKubernetes環境でIngressを利用する場合は、ファイアウォールの接続許可が必要な場合があります。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール IngressコントローラとしてNginx Ingressを利用する場合 デフォルトでは、IngressとNginx Ingressコントローラがインストールされます。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/ingress Ingressだけをインストールする場合 GKEなどIngressコントローラとしてマネジメントLBなどを利用する場合のパターンです。Ingressのみ必要な場合は、--setオプションでNginx-Ingressのインストールをfalseに設定にします。
$ helm install --name &amp;lt;release_name&amp;gt; --set ingress.nginxController=false easydoggie/ingress Nginx IngressおよびすべてのIngressルールを無効化したvalues.yamlを利用することもできます。必要なルールは--setオプションで有効にすることができます。
以下は、Nginxのルールのみ有効にした実行例です。
$ helm install --name &amp;lt;release_name&amp;gt; -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/ingress/ingress/values-false.yaml --set ingress.hosts.nginx.enabled=true easydoggie/ingress Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。
$ helm delete --purge &amp;lt;release_name&amp;gt; </description>
    </item>
    
    <item>
      <title>Kibana</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/kibana/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:39 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/kibana/</guid>
      <description> Kibanaはデータを可視化するツールです。
EasyDoggieでは、Fluentd、Elasticsearch、Kibanaのセットでログを可視化する用途で利用することを想定しています。
Kibanaのインストール ServiceとしてNoadPortを使う場合(デフォルト) &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/kibana  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でKibanaにアクセスする場合は、別途Ingressのインストールを行ってください。  ServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set kibana.service.type=LoadBalancer easydoggie/kibana</description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/mysql/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:46 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/mysql/</guid>
      <description>MySQLはデータベース管理システムです。
シングルマスタもしくはマスタ-スレープ構成のMySQLをインストールすることができます。
MySQLのインストール &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/mysql デフォルトではマスター x 1、スレーブ x 1のコンテナが起動します。 スレーブのノード数の変更などは、設定変更のページを参照してください。</description>
    </item>
    
    <item>
      <title>NGINX, NGINX Unit</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/nginx/</link>
      <pubDate>Tue, 18 Jun 2019 15:19:52 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/nginx/</guid>
      <description>NGINXは、オープンソースのWebサーバです。NGINX Unitは、複数言語に対応しているアプリケーションサーバです。デフォルトでは1つのPod内にNGINXとNGINX Unitのコンテナが起動します。
TL;DR # NGINXとNGINX Unitをインストールして、NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install easydoggie/nginx# NGINXだけインストールして、NGINX Ingress経由でアクセス $ helm install easydoggie/ingress $ helm install --set appServer.enabled=false easydoggie/nginx# Ingressを使わないでアクセス $ helm install --set service.type=LoadBalancer easydoggie/nginx はじめに  デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 以下のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でNginxにアクセスする場合は、別途Ingressのインストールを行ってください。  動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール NGINXとNGINX Unitをインストールする場合(デフォルト) デフォルトでは、NGINXとNGINX Unitがインストールされます。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/nginx  NGINXおよびNGINX Unitの設定値は、デフォルトの値が設定されます。設定値を変更する場合は、NGINXの設定変更またはNGINX Unitの設定変更を参照してください。</description>
    </item>
    
    <item>
      <title>Node.js</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/nodejs/</link>
      <pubDate>Fri, 14 Jun 2019 17:56:55 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/nodejs/</guid>
      <description> Node.jsのインストール ServiceとしてLoadBalancerを使う場合 デフォルトの設定では、Service.type=LoadBalancerとして起動します。 $ helm install --nama &amp;lt;release_name&amp;gt; easydoggie/node IngressとNginx Ingressを使う場合 IngressコントローラとしてNginx Ingressを使うパターンです。 IngressとNginx Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。また、ingress.kubernetes.io/ingress.classがnginxに指定されます。 $ helm install --name &amp;lt;release_name&amp;gt; \ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-nginx-ingress.yaml easydoggie/node IngressとGKEなどのマネジメントIngressコントローラを使う場合 IngressコントローラとしてGKEなどのマネジメントロードバランサーを使うパターンです。 Ingressを有効にしたマニフェストファイルを指定します。Node.js用のService.typeはNodePortに設定されます。 $ helm install --name &amp;lt;release_name&amp;gt; \ -f https://raw.githubusercontent.com/easydoggie/EasyDoggie/master/node/node/values-ingress.yaml easydoggie/node</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/prometheus/</link>
      <pubDate>Mon, 17 Jun 2019 10:06:18 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/prometheus/</guid>
      <description> Prometheus Operatorのインストール Prometheusはモニタリングのツールです。このチャートでは以下のモニタリングツール一式がインストールされます。
 prometheus-operator prometheus alertmanager node-exporter kube-state-metrics grafana  GrafanaのServiceとしてNoadPortを使う場合(デフォルト) $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/prometheus &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
 デフォルトのServiceタイプはIngress経由でのアクセスを想定しているため、NodePortとして起動します。 上記のインストールコマンドではIngress ControllerとIngess Resourceのインストールは行われません。 Ingress経由でGrafanaにアクセスする場合は、別途Ingressのインストールを行ってください。  GrafanaのServiceとしてLoadBalancerを使う場合 Ingressを使わず、ServiceタイプとしてLoadBalancerを使う場合は、setオプションでサービスタイプをLoadBalancerに変更します。
$ helm install --name &amp;lt;release_name&amp;gt; --set prometheus-operator.grafana.service.type=LoadBalancer easydoggie/prometheus</description>
    </item>
    
    <item>
      <title>Proxysql</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/proxysql/</link>
      <pubDate>Thu, 04 Jul 2019 12:03:17 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/proxysql/</guid>
      <description> ProxySQLはMySQLのプロキシです。GPLライセンスとして利用することができます。指定したクエリのルールに従って、ReadとWriteのクエリをMySQLサーバに振り分けます。アプリケーション側でMaster、Slaveのサーバ構成やフェイルオーバーを意識する必要がなくなり、DBの管理が簡単になります。 同様のMySQLプロキシとしてMaxScaleがあります。MaxScaleにはライセンス制限があるため、EasyDoggieではProxySQLを採用しています。
動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール $ helm install --name &amp;lt;release_name&amp;gt; easydoggie/proxysql &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。MySQLの接続先の設定などは、設定変更のページを参照してください。
Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。
$ helm delete --purge &amp;lt;release_name&amp;gt; </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://easydoggie.github.io/EasyDoggie/install/redis/</link>
      <pubDate>Tue, 18 Jun 2019 15:20:15 +0900</pubDate>
      
      <guid>https://easydoggie.github.io/EasyDoggie/install/redis/</guid>
      <description> Redisはインメモリのデータストアです。
シングルマスタもしくはマスタ/スレーブ構成のRedisをインストールすることができます。
動作確認環境  Docker Desktop for Windows (Kubernetes 1.10.11) Google Kubernetes Engine (Kubernetes 1.12.8-gke.6)  Chartのインストール Master-Slave構成（デフォルト） デフォルトではマスター x 1、スレーブ x 2のPodが起動します。データの永続化領域としてEmptyDirを利用します。 &amp;lt;release_name&amp;gt;には任意のリリース名を指定します。
$ helm install --name &amp;lt;release_name&amp;gt; easydoggie/redis スレーブのノード数の変更などは、設定変更のページを参照してください。
Masterのみの構成 マスター1台のみの構成です。--setオプションでクラスタの利用をfalseに設定します。データの永続化領域としてEmptyDirを利用します。
$ helm install --name &amp;lt;release_name&amp;gt; --set redis.cluster.enabled=false easydoggie/redis Chartの削除 指定したリリースのデプロイを削除するにはhelm deleteコマンドにリリース名を指定します。
$ helm delete &amp;lt;release_name&amp;gt;  リリース名を含めて完全に削除をするには--purgeオプションを利用します。
$ helm delete --purge &amp;lt;release_name&amp;gt; </description>
    </item>
    
  </channel>
</rss>